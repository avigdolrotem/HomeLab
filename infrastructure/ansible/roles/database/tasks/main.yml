- name: Wait for RDS to be available
  wait_for:
    host: "{{ rds_endpoint.split(':')[0] }}"
    port: 5432
    timeout: 300
    delay: 10

- name: Get master database credentials from Secrets Manager
  shell: |
    aws secretsmanager get-secret-value \
      --secret-id homelab-dev-rds-master \
      --query SecretString --output text
  register: master_secret_raw

- name: Parse master credentials
  set_fact:
    master_secret: "{{ master_secret_raw.stdout | from_json }}"

- name: Generate random passwords for applications
  set_fact:
    app_passwords:
      vaultwarden: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=32') }}"
      nextcloud: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=32') }}"
      grafana: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=32') }}"
      jenkins: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=32') }}"

- name: Create databases and users using separate commands
  shell: |
    export PGPASSWORD="{{ master_secret.password }}"
    createdb -h "{{ master_secret.host.split(':')[0] }}" -U "{{ master_secret.username }}" -p 5432 "{{ item }}" || true
    psql -h "{{ master_secret.host.split(':')[0] }}" -U "{{ master_secret.username }}" -p 5432 -d postgres -c "CREATE USER {{ item }}_user WITH PASSWORD '{{ app_passwords[item] }}';" || true
    psql -h "{{ master_secret.host.split(':')[0] }}" -U "{{ master_secret.username }}" -p 5432 -d postgres -c "GRANT ALL PRIVILEGES ON DATABASE {{ item }} TO {{ item }}_user;" || true
  loop:
    - vaultwarden
    - nextcloud
    - grafana
    - jenkins
    
  ignore_errors: yes

- name: Store application passwords in Secrets Manager
  shell: |
    aws secretsmanager create-secret \
      --name "homelab-dev-{{ item }}-db" \
      --description "Database credentials for {{ item }}" \
      --secret-string '{
        "host": "{{ master_secret.host.split(':')[0] }}",
        "port": "5432",
        "database": "{{ item }}",
        "username": "{{ item }}_user",
        "password": "{{ app_passwords[item] }}",
        "url": "postgresql://{{ item }}_user:{{ app_passwords[item] }}@{{ master_secret.host.split(':')[0] }}:5432/{{ item }}"
      }' 2>/dev/null || \
    aws secretsmanager update-secret \
      --secret-id "homelab-dev-{{ item }}-db" \
      --secret-string '{
        "host": "{{ master_secret.host.split(':')[0] }}",
        "port": "5432",
        "database": "{{ item }}",
        "username": "{{ item }}_user",
        "password": "{{ app_passwords[item] }}",
        "url": "postgresql://{{ item }}_user:{{ app_passwords[item] }}@{{ master_secret.host.split(':')[0] }}:5432/{{ item }}"
      }'
  loop:
    - vaultwarden
    - nextcloud
    - grafana
    - jenkins

- name: Create helper scripts
  copy:
    content: |
      #!/bin/bash
      SECRET_NAME=$1
      if [ -z "$SECRET_NAME" ]; then
          echo "Usage: get-db-secret <secret-name>"
          exit 1
      fi
      aws secretsmanager get-secret-value --secret-id "$SECRET_NAME" --query SecretString --output text
    dest: /usr/local/bin/get-db-secret
    mode: '0755'
  become: yes

- name: Create environment generator script
  copy:
    content: |
      #!/bin/bash
      ENV_DIR="/home/ubuntu/homelab/docker-compose/.env.d"
      mkdir -p "$ENV_DIR"
      
      for APP in vaultwarden nextcloud grafana jenkins; do
          SECRET_JSON=$(get-db-secret "homelab-dev-${APP}-db")
          if [ $? -eq 0 ]; then
              echo "$SECRET_JSON" | jq -r 'to_entries[] | "\(.key | ascii_upcase)=\(.value)"' > "$ENV_DIR/${APP}-db.env"
              echo "✅ $APP database env created"
          fi
      done
    dest: /usr/local/bin/generate-db-env
    mode: '0755'
  become: yes

- name: Display completion
  debug:
    msg: "✅ Database setup complete - using simple SQL approach"