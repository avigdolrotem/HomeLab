# infrastructure/ansible/roles/database/tasks/main.yml
# Clean database setup

- name: Install PostgreSQL client packages
  package:
    name:
      - postgresql-client-common
      - python3-psycopg2
      - python3-boto3
    state: present
  become: yes

- name: Add PostgreSQL repository
  block:
    - name: Add PostgreSQL GPG key
      apt_key:
        url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
        state: present
      become: yes

    - name: Add PostgreSQL repository
      apt_repository:
        repo: "deb http://apt.postgresql.org/pub/repos/apt/ {{ ansible_distribution_release }}-pgdg main"
        state: present
      become: yes

    - name: Install PostgreSQL 15 client
      package:
        name: postgresql-client-15
        state: present
      become: yes
  ignore_errors: true

- name: Wait for RDS to be available
  wait_for:
    host: "{{ rds_endpoint.split(':')[0] }}"
    port: 5432
    timeout: 600
    delay: 30

- name: Get master credentials and setup databases
  block:
    - name: Get master database credentials
      set_fact:
        master_secret: "{{ lookup('amazon.aws.aws_secret', 'homelab-dev-rds-master') }}"

    - name: Parse master credentials
      set_fact:
        db_host: "{{ master_secret.host.split(':')[0] }}"
        db_port: "{{ master_secret.port }}"
        master_user: "{{ master_secret.username }}"
        master_password: "{{ master_secret.password }}"

    - name: Generate application user passwords
      set_fact:
        app_passwords: "{{ app_passwords | default({}) | combine({item: lookup('password', '/dev/null chars=ascii_letters,digits length=32')}) }}"
      loop: [vaultwarden, nextcloud, grafana, jenkins]
      run_once: true

- name: Test master connection
  community.postgresql.postgresql_ping:
    login_host: "{{ db_host }}"
    login_port: "{{ db_port }}"
    login_user: "{{ master_user }}"
    login_password: "{{ master_password }}"
    login_db: homelab
  retries: 10
  delay: 30
  until: master_connection_test is succeeded
  register: master_connection_test

- name: Create application databases
  community.postgresql.postgresql_db:
    name: "{{ item }}"
    login_host: "{{ db_host }}"
    login_port: "{{ db_port }}"
    login_user: "{{ master_user }}"
    login_password: "{{ master_password }}"
    state: present
    encoding: UTF8
  loop: [vaultwarden, nextcloud, grafana, jenkins]
  retries: 3
  delay: 10

- name: Create application users
  community.postgresql.postgresql_user:
    name: "{{ item }}_user"
    password: "{{ app_passwords[item] }}"
    login_host: "{{ db_host }}"
    login_port: "{{ db_port }}"
    login_user: "{{ master_user }}"
    login_password: "{{ master_password }}"
    login_db: "homelab"
    state: present
    encrypted: true
  loop: [vaultwarden, nextcloud, grafana, jenkins]
  retries: 3
  delay: 10

- name: Grant database privileges
  community.postgresql.postgresql_privs:
    db: "{{ item }}"
    login_host: "{{ db_host }}"
    login_port: "{{ db_port }}"
    login_user: "{{ master_user }}"
    login_password: "{{ master_password }}"
    role: "{{ item }}_user"
    type: database
    privs: ALL
    state: present
  loop: [vaultwarden, nextcloud, grafana, jenkins]
  retries: 3
  delay: 10

- name: Grant schema privileges
  community.postgresql.postgresql_privs:
    db: "{{ item }}"
    login_host: "{{ db_host }}"
    login_port: "{{ db_port }}"
    login_user: "{{ master_user }}"
    login_password: "{{ master_password }}"
    role: "{{ item }}_user"
    type: schema
    objs: public
    privs: ALL
    state: present
  loop: [vaultwarden, nextcloud, grafana, jenkins]
  retries: 3
  delay: 10

- name: Store secrets in AWS Secrets Manager
  community.aws.secretsmanager_secret:
    name: "homelab-dev-{{ item }}-db"
    description: "Database credentials for {{ item }}"
    secret_type: string
    region: us-east-1
    secret: >-
      {{
        {
          'host': db_host,
          'port': db_port,
          'database': item,
          'username': item + '_user',
          'password': app_passwords[item],
          'url': 'postgresql://' + item + '_user:' + app_passwords[item] + '@' + db_host + ':' + (db_port|string) + '/' + item
        } | to_json
      }}
    state: present
  loop: [vaultwarden, nextcloud, grafana, jenkins]

- name: Install database environment generator script
  template:
    src: generate-db-env.sh.j2
    dest: /usr/local/bin/generate-db-env
    mode: '0755'
  become: yes